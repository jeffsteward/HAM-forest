<script>
    let socket = io('/controller');
    let drag = d3.drag();

    let object = {
        manifest: '',
        manifestUri: '',
        imageInfoUri: '',
        imageID: '',
        scaleFactor: 0
    };

    let leaf = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
    };

    let branch = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
    };

    let currentObjectIndex = 0;

    let annotationSVG;

    const objects = ['https://iiif.harvardartmuseums.org/manifests/object/6772',
                        'https://iiif.harvardartmuseums.org/manifests/object/256363',
                        'https://iiif.harvardartmuseums.org/manifests/object/196997',
                        'https://iiif.harvardartmuseums.org/manifests/object/312569',
                        'https://iiif.harvardartmuseums.org/manifests/object/303397',
                        'https://iiif.harvardartmuseums.org/manifests/object/95035',
                        'https://iiif.harvardartmuseums.org/manifests/object/210644',
                        'https://iiif.harvardartmuseums.org/manifests/object/316760',
                        'https://iiif.harvardartmuseums.org/manifests/object/216599',
                        'https://iiif.harvardartmuseums.org/manifests/object/295433',
                        'https://iiif.harvardartmuseums.org/manifests/object/320567'];

    function spawn() {
        let data = getSelectedRegions();
        socket.emit('create-tree', data);
    }

    function getSelectedRegions() {
        let leafBB = d3.select("#leaf").node().getBBox();
        let leafImageFragment =  Math.round(leafBB.x * object.scaleFactor) + ',' + Math.round(leafBB.y * object.scaleFactor) + ',' + Math.round(leafBB.width * object.scaleFactor) + ',' + Math.round(leafBB.height * object.scaleFactor);    
        let leafImageURL = object.imageID + '/' + leafImageFragment + '/full/0/default.jpg';

        let branchBB = d3.select("#branch").node().getBBox();
        let branchImageFragment =  Math.round(branchBB.x * object.scaleFactor) + ',' + Math.round(branchBB.y * object.scaleFactor) + ',' + Math.round(branchBB.width * object.scaleFactor) + ',' + Math.round(branchBB.height * object.scaleFactor);    
        let branchImageURL = object.imageID + '/' + branchImageFragment + '/full/0/default.jpg';
        
        return {leaf: leafImageURL, branch: branchImageURL};
    }

    function next() {
        currentObjectIndex +=1;
        if (currentObjectIndex >= objects.length) {
            currentObjectIndex = 0;
        }
        showImage(objects[currentObjectIndex]);
    }

    function previous() {
        currentObjectIndex -=1;
        if (currentObjectIndex < 0) {
            currentObjectIndex = objects.length - 1;
        }
        showImage(objects[currentObjectIndex]);
    }

    function showImage(manifestUri) {
        manifesto.loadManifest(manifestUri).then((manifest) => {
            object.manifestUri = manifestUri
            object.manifest = manifest;

            let m = manifesto.create(manifest);
            let s = m.getSequences()[0];
            let c = s.getCanvasByIndex(0);
            let i = c.getImages()[0];

            object.imageInfoUri = i.getResource().getServices()[0].getInfoUri();
            object.imageID = i.getResource().getServices()[0].getProperty('@id');
            
            object.scaleFactor = i.getResource().getWidth()/500;

            let imageURL = object.imageID + '/full/500,/0/default.jpg';
            let targetImage = $('#target')
                                .attr('src',imageURL)
                                .on('load', initializeAnnotations);
        });
    }

    function initializeAnnotations() {
        let targetImage = $('#target');
        annotationSVG.selectAll('*').remove();

        annotationSVG.attr('width', targetImage.width())
                       .attr('height', targetImage.height())
                       .style('top', targetImage.position().top)
                       .style('left', targetImage.position().left);

        annotationSVG.append('rect')
                        .attr('stroke', 'green')
                        .attr('stroke-width', 5)
                        .attr('fill', 'transparent')
                        .attr('x', 100)
                        .attr('y', 100)
                        .attr('width', 50)
                        .attr('height', 50)
                        .attr('id', 'leaf')
                        .call(drag.on('drag', dragged));

        annotationSVG.append('rect')
                        .attr('stroke', 'brown')
                        .attr('stroke-width', 5)
                        .attr('fill', 'transparent')
                        .attr('x', 300)
                        .attr('y', 175)
                        .attr('width', 25)
                        .attr('height', 150)
                        .attr('id', 'branch')
                        .call(drag.on('drag', dragged));
    }

    function dragged() {
        //d3.event.subject.x = d3.event.x;
        //d3.event.subject.x = d3.event.y;
        
        d3.select(this).raise()
            .attr('x', d3.event.x)
            .attr('y', d3.event.y);
    }

    $(document).ready(() => {
        showImage(objects[currentObjectIndex]);

        annotationSVG = d3.select('#editor')
                            .append('svg')
                            .attr('id', 'annotations');
    });
</script>

<h1>{{title}}</h1>

<section id='editor'>
    <img src='' id='target'>
</section>    

<section id='controls'>
    <button onclick='spawn()'>Spawn</button>
    <button onclick='previous()'>Previous</button>
    <button onclick='next()'>Next</button>
</section>