<script>
    let socket = io('/controller');
    let drag = d3.drag();

    let collection = null;
    let collectionUri = 'https://www.harvardartmuseums.org/profile/jeff_steward@harvard.edu/mycollections/3818/art-forest/iiif/top';
    let currentManifestIndex = 0;

    let object = {
        manifest: '',
        manifestUri: '',
        imageInfoUri: '',
        imageID: '',
        scaleFactor: 0
    };

    let annotations = [
        {name: 'leaf', color: 'green', x: 0, y: 0, width: 50, height: 50},
        {name: 'branch', color: 'red', x: 0, y: 0, width: 25, height: 150}
    ];

    let annotationSVG;

    let zoomInFactor = 1.15;
    let zoomOutFactor = 0.85;

    function getCollection() {
        manifesto.loadManifest(collectionUri).then((manifest) => {
            let c = manifesto.create(manifest);
            if (c.isCollection()) {
                collection = c;
                if (collection.getManifests().length > 0) {
                    showImage(collection.getManifests()[currentManifestIndex].getProperty('id'));
                }
            }
        });
    }

    function spawn() {
        let data = getSelectedRegions();
        socket.emit('create-tree', data);
    }

    function getSelectedRegions() {
        let leafBB = d3.select("#leaf").node().getBBox();
        let leafImageFragment =  Math.round(leafBB.x * object.scaleFactor) + ',' + Math.round(leafBB.y * object.scaleFactor) + ',' + Math.round(leafBB.width * object.scaleFactor) + ',' + Math.round(leafBB.height * object.scaleFactor);    
        let leafImageURL = object.imageID + '/' + leafImageFragment + '/full/0/default.jpg';

        let branchBB = d3.select("#branch").node().getBBox();
        let branchImageFragment =  Math.round(branchBB.x * object.scaleFactor) + ',' + Math.round(branchBB.y * object.scaleFactor) + ',' + Math.round(branchBB.width * object.scaleFactor) + ',' + Math.round(branchBB.height * object.scaleFactor);    
        let branchImageURL = object.imageID + '/' + branchImageFragment + '/full/0/default.jpg';
        
        return {leaf: leafImageURL, branch: branchImageURL};
    }

    function next() {
        currentManifestIndex +=1;
        if (currentManifestIndex >= collection.getManifests().length) {
            currentManifestIndex = 0;
        }
        showImage(collection.getManifests()[currentManifestIndex].getProperty('id'));
    }

    function previous() {
        currentManifestIndex -=1;
        if (currentManifestIndex < 0) {
            currentManifestIndex = collection.getManifests().length - 1;
        }
        showImage(collection.getManifests()[currentManifestIndex].getProperty('id'));
    }

    function showImage(manifestUri) {
        manifesto.loadManifest(manifestUri).then((manifest) => {
            object.manifestUri = manifestUri
            object.manifest = manifest;

            let m = manifesto.create(manifest);
            let s = m.getSequences()[0];
            let c = s.getCanvasByIndex(0);
            let i = c.getImages()[0];

            object.imageInfoUri = i.getResource().getServices()[0].getInfoUri();
            object.imageID = i.getResource().getServices()[0].getProperty('@id');
            
            object.scaleFactor = i.getResource().getWidth()/600;

            let imageURL = object.imageID + '/full/600,/0/default.jpg';
            let targetImage = $('#target')
                                .attr('src',imageURL)
                                .on('load', initializeAnnotations);
        });
    }

    function initializeAnnotations() {
        let targetImage = $('#target');
        // resize the SVG window to exact dimensions of the underlying image
        annotationSVG.attr('width', targetImage.width())
                       .attr('height', targetImage.height())
                       .style('top', targetImage.position().top)
                       .style('left', targetImage.position().left);

        if (annotationSVG.selectAll('rect').empty()) {
            annotationSVG.selectAll('rect')
                        .data(annotations)
                    .enter().append('rect')
                        .attr('stroke', (d) => {return d.color})
                        .attr('stroke-width', 5)
                        .attr('fill', 'transparent')
                        .attr('x', (d) => {return d.x})
                        .attr('y', (d) => {return d.y})
                        .attr('width', (d) => {return d.width})
                        .attr('height', (d) => {return d.height})
                        .attr('id', (d) => {return d.name})
                        .call(drag
                                .on('start', dragStarted)
                                .on('end', dragEnded)
                                .on('drag', dragged));
        } else { 
            // find out if the boxes are out of bounds
            // and move them in
        }
    }

    function updateAnnotation(annotation) {
        let bbox = d3.select(annotation).node().getBBox();
        let index = (annotation.id === 'leaf' ? 0 : 1); 

        annotations[index].x = bbox.x;
        annotations[index].y = bbox.y;
        annotations[index].width = bbox.width;
        annotations[index].height = bbox.height;
    }

    function zoomAnnotation(annotation, factor) {
        let a = d3.select(annotation);
        let w = a.attr('width');
        let h = a.attr('height');

        if ((w * factor < 100) && (w * factor > 10)) {
            a.attr('width', w * factor)
                .attr('height', h * factor);
    
            updateAnnotation(annotation);
        }
    }

    function dragged() {
        d3.select(this)
            .attr('x', (d3.event.x - x0))
            .attr('y', (d3.event.y - y0));
    }

    let x0 = 0;
    let y0 = 0;
    function dragStarted() {
        x0 = d3.event.x - d3.select(this).node().getBBox().x;
        y0 = d3.event.y - d3.select(this).node().getBBox().y;
    }

    function dragEnded() {
        updateAnnotation(this);
    }

    $(document).ready(() => {
        annotationSVG = d3.select('#editor')
                            .append('svg')
                            .attr('id', 'annotations');
        
        getCollection();
    });
</script>

<h1>{{title}}</h1>

<section id='controls'>
    <button onclick='spawn()'>Spawn</button>
    <button onclick='previous()'>Previous</button>
    <button onclick='next()'>Next</button>

    <button onclick='zoomAnnotation("#leaf",zoomInFactor)'>Make Leaf Bigger</button>
    <button onclick='zoomAnnotation("#leaf",zoomOutFactor)'>Make Leaf Smaller</button>

    <button onclick='zoomAnnotation("#branch",zoomInFactor)'>Make Branch Bigger</button>
    <button onclick='zoomAnnotation("#branch",zoomOutFactor)'>Make Branch Smaller</button>    
</section>

<section id='editor'>
    <img src='' id='target'>
</section>    